<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds" debug="false">
    <!-- logback的根节点 <configuration>的属性scan、scanPeriod、debug
       scan:        当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
       scanPeriod:  设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
       debug:       当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
     -->

    <!-- 定义日志文件的存储地址 -->
    <!--    <springProperty scope="context" name="LOG_HOME" source="log.path"/>-->
    <!-- 将监听类加入到xml，需要使用监听类完成这个任务，否则无法systemctl中无法使用 -->
    <contextListener class="com.sbvadmin.common.config.CustomLogContextListener" />

    <springProperty scope="context" name="APP_NAME"  source="spring.application.packageName"/>
    <!-- 格式化输出：
        %d          表示日期，
        %thread     表示线程名，
        %level      日志级别从左显示5个字符宽度，
        %thread     线程名
        %file:%line 文件名:行号，
        %m          日志消息，
        %n          换行符，
        %X{traceId} 自定义设置的参数
        %mdc        自定义参数
    -->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%5level) -- [%15.15t] %cyan(%-23.23logger{23}) : %m%n"/>


    <!-- appender是configuration的子节点，是负责写日志的组件 -->
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- INFO日志 appender: 按照每天生成日志文件 -->
    <appender name="INFO-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，记录debug级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!-- 写入的日志文件名，可以使相对目录也可以是绝对目录，如果上级目录不存在则自动创建 -->
        <file>${LOG_HOME}/${APP_NAME}/mail-info.log</file>
        <!-- 如果为true表示日志被追加到文件结尾，如果是false表示清空文件 -->
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名: %d可以包含一个Java.text.SimpleDateFormat指定的时间格式 -->
            <fileNamePattern>${LOG_HOME}/${APP_NAME}/mail-info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 日志文件保存历史数量:控制保留的归档文件的最大数量，如果超出数量就删除旧文件 -->
            <maxHistory>30</maxHistory>
            <!-- 文件大小超过100MB归档 -->
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- 错误日志 appender: 按照每天生成日志文件 -->
    <appender name="ERROR-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录error级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 日志名称 -->
        <file>${LOG_HOME}/${APP_NAME}/mail-error.log</file>
        <append>true</append>
        <!-- 每天生成一个日志文件，保存30天的日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名:按天回滚 daily -->
            <fileNamePattern>${LOG_HOME}/${APP_NAME}/mail-error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 日志文件保留天数 -->
            <maxHistory>30</maxHistory>
            <!-- 文件大小超过100MB归档 -->
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- 控制台输出日志级别,记录info级别以上的日志,可通过sba动态改成debug -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="INFO-APPENDER"/>
        <appender-ref ref="ERROR-APPENDER"/>
    </root>
</configuration>